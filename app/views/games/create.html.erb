<h1>Green Planet</h1>
<p>
  Try to land on the green planet without getting hit by a red meteor, or other
  orbiting nasties.
</p>
<h2>Navigation</h2>
  <ul>
    <li>Increase orbital radius: Up arrow</li>
    <li>Decrease orbital radius: Down arrow</li>
    <li>Increase clockwise angular velocity: Left arrow</li>
    <li>Decrase clockwise angular velocity: Right arrow</li>
  </ul>
<p>Points are awarded based upon getting closed to the green planet! Click the
game board to play!</p>
<canvas id="canvas" style="background-color:#333;" width="500" height="500" onclick="play()"></canvas>
<!-- <div id="data" data-game="<%= %>"></div> -->

<script>
var gameId = <%= @game.id %>;

// params {velocity, radius = 0, orbitRadius = 1, theta = 0, centerX = 0, centerY = 0}
function GameObject(params){
  this.velocity = params.velocity;
  this.theta = params.theta || 0;
  this.orbitRadius = params.orbitRadius;
  this.radius = params.radius || 20;
  this.centerX = params.centerX || 0;
  this.centerY = params.centerY || 0;
  this.color = params.color || '#ff0000';
}

GameObject.prototype.getCurrentPosition = function(){
  return {
    x: this.orbitRadius * Math.cos(this.theta) + this.centerX,
    y: this.orbitRadius * Math.sin(this.theta) + this.centerY,
    radius: this.radius
  };
}

GameObject.prototype.isTouching = function(pos){
  var currentPos = this.getCurrentPosition();
  var dist = [pos.y - currentPos.y, pos.x - currentPos.x];
  for(var i = 0; i < dist.length; i++){ dist[i] = dist[i] * dist[i]; }
  dist[0] = dist[0] + dist[1];
  var r = Math.sqrt(dist[0]);
  return (r <= pos.radius + currentPos.radius);
}

GameObject.prototype.tick = function(obj){
  this.theta += this.velocity;
  if(this.orbitRadius > 0) {this.orbitRadius -= 0.001;}

  if(!obj || obj == this){return;}
  return this.isTouching(obj.getCurrentPosition());
}

function clearCanvas(){
  var canvas = document.getElementById('canvas');
  if (canvas.getContext){
    var ctx = canvas.getContext('2d');
    ctx.clearRect(0,0,500,500); // clear canvas
  }
}

function drawObject(object){
  var canvas = document.getElementById('canvas');
  if (canvas.getContext){
    var ctx = canvas.getContext('2d');
    var pos = object.getCurrentPosition();

    console.log(pos);

    ctx.beginPath();
    ctx.arc(pos.x,pos.y,pos.radius,0,Math.PI*2,true); // Outer circle
    if(object.color){ ctx.fillStyle = object.color; }
    ctx.fill();
  }
}

function generateRandomObject(centerX, centerY){
  var velocity = 0.02 + Math.random() * 0.3;
  var radius = 5 + Math.random() * 5;
  var orbitRadius = Math.random() * 200;

  return new GameObject({
    velocity,
    radius,
    orbitRadius,
    centerX,
    centerY
  });
}

function gameOver(player){
  var score = 1 / player.orbitRadius;

  var url = "/games/" + gameId + '?score=' + score;
  var oReq = new XMLHttpRequest();
  oReq.addEventListener("load", function(){
    window.location = '/games';
    setTimeout(function(){window.alert("Game over!");}, 200);
  });
  oReq.open("PUT", url);
  oReq.send({score: score});
}

function bindKeys(player){
  var changeValOrbitRadius = 5;
  var changeValVelocity = 0.01;
  var orbitLimit = 200;
  var velocityLimit = 0.1;
  document.onkeydown = function(evt) {
    evt.preventDefault();
    if(evt.which == 40){ if(player.orbitRadius > 0) player.orbitRadius -= changeValOrbitRadius; }
    else if(evt.which == 38){ if(player.orbitRadius < orbitLimit) player.orbitRadius += changeValOrbitRadius; }
    else if(evt.which == 37){ if(player.velocity > -1 * velocityLimit) player.velocity -= changeValVelocity; }
    else if(evt.which == 39){ if(player.velocity < velocityLimit) player.velocity += changeValVelocity; }
  };
}


function play(){
  var centerX = 250, centerY = 250;
  var gameObjects = [];
  var numObjects = Math.ceil(Math.random() * 5) + 4;
  for(var i = 0; i < numObjects; i++){
  gameObjects.push(generateRandomObject(centerX, centerY));
  }

  var planet = new GameObject({
  velocity: 0,
  radius: 10,
  orbitRadius: 0,
  centerX,
  centerY,
  color:'#00ff00'
  });
  planet.tick = function(){}
  gameObjects.push(planet);

  var player = new GameObject({
  velocity: 0.03,
  radius: 12,
  orbitRadius: 230,
  centerX,
  centerY,
  color:'#0000ff'
  });

  bindKeys(player);
  player.tick = function(){
  this.theta += this.velocity;
  if(this.orbitRadius - this.radius < 12){return true;}
  if(this.orbitRadius > 0) {this.orbitRadius -= 0.5};
  }

  gameObjects.push(player);

  function updateGame(obj){
  drawObject(obj);
  if(obj.tick(player)){ gameOver(player); }
  }

  setInterval(function(){
  clearCanvas();
  gameObjects.forEach(updateGame);
  }, 25);
}
</script>
